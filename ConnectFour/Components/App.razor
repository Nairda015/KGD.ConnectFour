<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>KGD Connect Four</title>
    <base href="/"/>
    <link rel="icon" type="image/png" href="favicon.ico"/>
    
    <script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/sse.js"></script>
    
    <script src="https://unpkg.com/@@microsoft/signalr@next/dist/browser/signalr.js"></script>
    <script src="/js/hx-signalr.js"></script>
    
    <script src="https://cdn.tailwindcss.com"></script>

    @* TODO *@
    <meta name="htmx-config" includeAspNetAntiforgeryToken="true" />

    <HeadOutlet/>
</head>

<body>
<Routes/>
<script src="_framework/blazor.web.js"></script>

<script>
// document.addEventListener("htmx:configRequest", (evt) => {
//     let httpVerb = evt.detail.verb.toUpperCase();
//     if (httpVerb === 'GET') return;
//   
//     let antiForgery = htmx.config.antiForgery;
//
//     if (antiForgery) {
//
//         // already specified on form, short circuit
//         if (evt.detail.parameters[antiForgery.formFieldName])
//             return;
//
//         if (antiForgery.headerName) {
//             evt.detail.headers[antiForgery.headerName]
//                 = antiForgery.requestToken;
//         } else {
//             evt.detail.parameters[antiForgery.formFieldName]
//                 = antiForgery.requestToken;
//         }
//     }
//    
//     console.log(antiForgery);
//     console.log(antiForgery?.headerName);
// });

if (!document.body.attributes.__htmx_antiforgery) {
    document.addEventListener("htmx:configRequest", evt => {
        let httpVerb = evt.detail.verb.toUpperCase();
        if (httpVerb === 'GET') return;
        let antiForgery = htmx.config.antiForgery;
        if (antiForgery) {
            // already specified on form, short circuit
            if (evt.detail.parameters[antiForgery.formFieldName])
                return;

            if (antiForgery.headerName) {
                evt.detail.headers[antiForgery.headerName]
                    = antiForgery.requestToken;
            } else {
                evt.detail.parameters[antiForgery.formFieldName]
                    = antiForgery.requestToken;
            }
        }
    });
    document.addEventListener("htmx:afterOnLoad", evt => {
        if (evt.detail.boosted) {
            const parser = new DOMParser();
            const html = parser.parseFromString(evt.detail.xhr.responseText, 'text/html');
            const selector = 'meta[name=htmx-config]';
            const config = html.querySelector(selector);
            if (config) {
                const current = document.querySelector(selector);
                // only change the anti-forgery token
                const key = 'antiForgery';
                htmx.config[key] = JSON.parse(config.attributes['content'].value)[key];
                // update DOM, probably not necessary, but for sanity's sake
                current.replaceWith(config);
            }
        }
    });
    document.body.attributes.__htmx_antiforgery = true;
}
</script>
</body>
</html>